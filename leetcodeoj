#include <bits/stdc++.h>
#include<algorithm>
using namespace std;
typedef long long ll;

ll MaxSubSequence(vector<ll> a)
{
  ll ThisSum,MaxSum,j;
  ThisSum = MaxSum =0;
  for(j = 0;j < a.size();j++)
  {
    ThisSum += a[j];

    if(ThisSum > MaxSum)
      MaxSum = ThisSum;
    else if(ThisSum < 0)
      ThisSum = 0;
  }
  return MaxSum;
}
ll maxSubSum(vector<ll>& a)
{
       ll maxSum = 0,cnt=0;
       for (int i = 0; i <= a.size(); i++) {
            for(int j=a.size();j>=0;j--) {
                cnt++;
                for(int k=0;k<i;k++)
                    a[k]*=-1;
                for(int k=a.size()-1;k>=j;k--)
                    a[k]*=-1;
                //debug

                maxSum=max(maxSum,MaxSubSequence(a));
                for(int k=0;k<i;k++)
                    a[k]*=-1;
                for(int k=a.size()-1;k>=j;k--)
                    a[k]*=-1;
            }
       }
       return maxSum;
}

class Solution {
public:

    bool isonediff(string s2, string s1){
        int i=0;
        for(int j=0;j<s1.length();j++){
            if(s1.at(j)!=s2.at(j))i++;
        }
        if(i==1)return true;
        else return false;
    }
    vector<string>v;
    vector<vector<string> >vet;
    vector<vector<string> > findLadders(string beginWord, string endWord, unordered_set<string> &wordList) {

        vector<int>ve(wordList.size(),0);
        v.push_back(beginWord);
        finda(beginWord,endWord,wordList,ve);
        if(vet.size()){
            int ff=vet[0].size();
            for(int i=0;i<vet.size();i++)
                ff=vet[i].size()<ff?vet[i].size():ff;
        for(int i=0;i<vet.size();i++)
        if(vet[i].size()>ff){vet.erase(vet.begin()+i);i--;}}
        return vet;
    }

    void finda(string beginWord, string endWord,unordered_set<string> &wordList,vector<int> &ve){
        if(isonediff(v.back(),endWord)){
                    v.push_back(endWord);
                    vet.push_back(v);
                    v.pop_back();
        }else{
        int i=-1;
        for(auto ii:wordList){
            i++;
            if(ve[i]==0&&isonediff(ii,v.back())){
                v.push_back(ii);
                ve[i]=1;
                finda(beginWord,endWord,wordList,ve);
                ve[i]=0;
                v.pop_back();
            }
        }
    }}
};
class solutions{
public:
    vector<int>v;
    vector<int>ve;
    void printn(int n,vector<int >vv){
        if(ve.size()==0){
            for(int i=0;i<n;i++)ve.push_back(0);
        }
        for(int i=0;i<n;i++){
            if(ve[i]==0){
                    v.push_back(vv[i]);
                    ve[i]=1;

            if(v.size()==n)
            {
                for(int j=0;j<n;j++)cout<<v[j];
                cout<<endl;
            }else{
                printn(n,vv);
            }
            ve[i]=0;
            v.pop_back();
            }

        }
    }
};
class Solution2{
public:
    int backpackvi(vector<int>&nums,int target){
        backp(nums,target);
        return numt;
    }
    vector<int>v;
    int sum1=0;
    int numt=0;
    void backp(vector<int >&nums,int t){
        for(int i=0;i<nums.size();i++){
            sum1+=nums[i];
            if(sum1==t)numt++;
            else if(sum1<t){
                backp(nums,t);
            }
            sum1-=nums[i];
        }
    }
};
void f(int a,int b=0){
    cout<<a+b;
}
class Solution5 {
public:
    /**
     * @param A an array
     * @return total of reverse pairs
     */
    vector<int>v;
    int numr;
    long long reversePairs(vector<int>& A) {
        // Write your code here
        numr=0;
        numre(A,0,A.size()-1);
        return numr;
    }

    void numre(vector<int>& A,int left,int right){
        if(right>left){
            int middle=(left+right)/2;
            numre(A,left,middle);
            numre(A,middle+1,right);
            int l=left,r=middle+1;
            while(l<=middle&&r<=right){
                if(A[l]>A[r]){
                    numr+=middle+1-l;
                    v.push_back(A[r]);
                    r++;

                }else{
                    v.push_back(A[l]);
                    l++;
                }
            }
            if(l<=middle){
                    while(l<=middle){
                            int k=A[l];
                        v.push_back(k);
                        l++;
                    }
                }else{
                    while(r<=right){
                            int k=A[r];
                        v.push_back(k);
                        r++;
                    }
                }
                int i=0;
                for(l=left;l<=right;i++,l++){
                    A[l]=v[i];
                }
                v.clear();
        }
    }
};

  // This is the interface that allows for creating nested lists.
  // You should not implement it, or speculate about its implementation
  class NestedInteger {
    public:
      // Return true if this NestedInteger holds a single integer,
      // rather than a nested list.
     bool isInteger() const;

      // Return the single integer that this NestedInteger holds,
      // if it holds a single integer
      // The result is undefined if this NestedInteger holds a nested list
      int getInteger() const;

      // Return the nested list that this NestedInteger holds,
      // if it holds a nested list
      // The result is undefined if this NestedInteger holds a single integer
      const vector<NestedInteger> &getList() const;
  };
class NestedIterator {
public:
    int ii;
    vector<int>vv;
    vector<NestedInteger>nest;
    NestedIterator(vector<NestedInteger> &nestedList) {
        // Initialize your data structure here.
        nest=nestedList;
        ii=-1;
        f(nest);
    }

    // @return {int} the next element in the iteration
    int next() {
        // Write your code here
        vv[ii];
    }

    void f(vector<NestedInteger>& ve){
        for(int i=0;i<ve.size();i++){
            if(ve[i].isInteger())vv.push_back(ve[i].getInteger());
            else{
                //f(ve[i].getList());
            }
        }
    }
    // @return {boolean} true if the iteration has more element or false
    bool hasNext() {
        // Write your code here
        return vv.size()>++ii;
    }
};

/**
 * Your NestedIterator object will be instantiated and called as such:
 * NestedIterator i(nestedList);nestediterator object will beinstantiated and called as such push_back i.next and called as such
 * while (i.hasNext()) v.push_back(i.next());//int enjoy yourselves next solution next solution public matrix
 */
 class Solution6 {//build vector<int>next;build message check cpp wsign compare solution guil compile vector unsigned long long int integer express integer express wsign compare tool plugin doxyblocks setting help workspace gui main cource sourcecppcheck express ionwsign comparecppcheck cppcheckgggungui gcc compile
public://int a = s + n;
    //
    /**
     * @param costs n x 3 cost matrix
     * @return an integer, the minimum cost to paint all houses
     */
     vector<vector<int> >c;//vector int n = 0; int m = 1;

     int minc(vector<vector<int> >& c,int n){
        int i=0;int min1=INT_MAX;
        while(i<c.back().size()){
            if(i==n);
            else{
                if(c.back().at(i)<min1)min1=c.back().at(i);
            }
            i++;
        }
        return min1;
     }
    int minCost(vector<vector<int>>& costs) {
        // Write your code here
        if(costs.size()==0)return 0;
        c.push_back(costs[0]);
        for(int i=1;i<costs.size();i++){
            vector<int>ve;
            for(int j=0;j<costs[0].size();j++){
                ve.push_back(minc(c,j)+costs[i][j]);
            }
            c.push_back(ve);
        }
        int k=c.back().at(0);
        for(int i=0;i<c.back().size();i++)k=k>c.back().at(i)?c.back().at(i):k;
        return k;
    }
};
class Solution1{
public:
    vector<int>v;
    int numSquares(int n){
        if(sqrt(n)*sqrt(n)==n)return 1;
        v.push_back(0);
        v.push_back(1);
        for(int i=2;i<=n;i++){
            v.push_back(minf(v,i));
        }
        return v.back();
    }
    int minf(vector<int >v,int i){
        int num0=i;
        for(int j=1;j<=sqrt(i);j++)
        {
            if(v[i-j*j]+1<num0)num0=v[i-j*j]+1;
            if(num0==2)break;
        }
        return num0;
    }
};
class Solution7 {
public:
    /**
     * @param s the IP string
     * @return All possible valid IP addresses
     */
    vector<string> restoreIpAddresses(string& s) {
        // Write your code here
        vector<string>v;
        if(s.length()==0)return v;
        for(int a=1;a<=s.size()-3&&a<=3;a++){
            if(atoi(s.substr(0,a).c_str())>255)break;
            if(s[0]=='0'&&a!=1)break;
            for(int b=a+1;b<=s.size()-2&&b-a<=3;b++){
                if(atoi(s.substr(a,b-a).c_str())>255)break;
                if(s[a]=='0'&&b-a!=1)break;
                for(int c=b+1;c<=s.size()-1&&c-b<=3;c++){
                    if(atoi(s.substr(b,c-b).c_str())>255)break;
                    if(s[b]=='0'&&c-b!=1)break;
                    if(atoi(s.substr(c,s.size()-c).c_str())>255)continue;
                    if(s[c]=='0'&&s.size()-c!=1)continue;
                    string st;
                    st+=s.substr(0,a);
                    st+=".";
                    st+=s.substr(a,b-a);
                    st+=".";
                    st+=s.substr(b,c-b);
                    st+=".";
                    st+=s.substr(c,s.size()-c);
                    v.push_back(st);
                }
            }
        }
        return v;
    }
};
class Solution8 {
public:
    /**
     * @param n an integer
     * @param edges a list of undirected edges
     * @return true if it's a valid tree, or false
     */
    bool validTree(int n, vector<vector<int> >& edges) {
        // Write your code here

    }
};


shared_ptr<int> ReturnSharedPtr()
{
    shared_ptr<int> p(new int(1000));
    shared_ptr<int> p2(p);
    shared_ptr<int> p3=p;
    shared_ptr<int> p4;
    p4=p2;
    return p;
}
class solution9{
public:
    int maxl(vector<int>v){
        vector<int>v1;

        for(int i=0;i<v.size();i++){
            if(i==0)v1.push_back(1);else{
            if(v[i]>v[i-1])v1.push_back(v1[i-1]+1);
            else{v1.push_back(1);}}
        }
        int maxlen=0;
        for(int i=0;i<v1.size();i++){
            maxlen=v1[i]>maxlen?v1[i]:maxlen;
        }
        return maxlen;
    }
    int maxn(vector<int>vet){
        int m=maxl(vet);
        for(int i=0;i<vet.size()-1;i++){
            for(int j=i+1;i<vet.size();j++){
                    vector<int>v;
                for(int a=0;a<=i;a++){

                }
            }
        }
    }
};

int main()
{
    vector<int>v{2,3,1,4,2,5};
    solution9 s9;
    int a;int b;
    f(10);
    cout<<s9.maxl(v);
    list<int> L;
    L.push_back(10);//push_back(10
//iterator it y =new double gbeginbeginbeginlist int iterator    list<int>::iterator it;//end begin cout<<it maxcout solution
    for(it=L.begin();it!=L.end();it++){
        cout<<*it;
    }
    return 0;
}
